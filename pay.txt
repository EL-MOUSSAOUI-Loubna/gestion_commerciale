<!-- Payment and Totals Section -->
<div class="row mt-4 mb-3">
  <div class="col-md-7">
    <div class="card shadow-sm">
      <div class="card-header bg-light">
        <h6 class="mb-0">Mode de paiement</h6>
      </div>
      <div class="card-body">
        <div class="btn-group w-100" role="group" aria-label="Mode de paiement">
          <input type="radio" class="btn-check" name="mode_paiement" id="paiement-espece" value="espèce" autocomplete="off">
          <label class="btn btn-outline-primary" for="paiement-espece">Espèce</label>
          
          <input type="radio" class="btn-check" name="mode_paiement" id="paiement-cheque" value="chèque" autocomplete="off">
          <label class="btn btn-outline-primary" for="paiement-cheque">Chèque</label>
          
          <input type="radio" class="btn-check" name="mode_paiement" id="paiement-carte" value="carte" autocomplete="off">
          <label class="btn btn-outline-primary" for="paiement-carte">Carte</label>
          
          <input type="radio" class="btn-check" name="mode_paiement" id="paiement-effet" value="effet" autocomplete="off">
          <label class="btn btn-outline-primary" for="paiement-effet">Effet</label>
          
          <input type="radio" class="btn-check" name="mode_paiement" id="paiement-autre" value="autre" autocomplete="off">
          <label class="btn btn-outline-primary" for="paiement-autre">Autre</label>
        </div>
      </div>
    </div>
  </div>
  
  <div class="col-md-5">
    <div class="card shadow-sm">
      <div class="card-header bg-light">
        <h6 class="mb-0">Totaux</h6>
      </div>
      <div class="card-body">
        <div class="d-flex justify-content-between">
          <strong>Total HT:</strong>
          <span id="totalHT" class="h5">0</span> <span class="text-muted">dh</span>
        </div>
        <div class="d-flex justify-content-between mt-2">
          <strong>Total TTC:</strong>
          <span id="totalTTC" class="h5 text-primary">0</span> <span class="text-muted">dh</span>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Hidden field to store the mode_paiement value -->
<input type="hidden" id="hiddenModePaiement" value="">

<!-- Enregistrer button -->
<div class="text-end mt-3">
  <button id="enregistrerBtn" class="btn btn-primary btn-lg">
    <i class="bi bi-save"></i> Enregistrer la facture
  </button>
</div>
_________________________________________________
// Add this right after your other script section
<script>
  // Listen for changes to the payment method radio buttons
  $('input[name="mode_paiement"]').on('change', function() {
    $("#hiddenModePaiement").val($(this).val());
  });

  // Update the enregistrerBtn click handler
  $("#enregistrerBtn").on("click", function() {
    // Check if payment method is selected
    const modePaiement = $("#hiddenModePaiement").val();
    if (!modePaiement) {
      alert("Veuillez sélectionner un mode de paiement.");
      return;
    }
    
    const data = {
        client_id: $("#hiddenClientId").val(),
        date_emission: $("#hiddenDateFacture").val(),
        lignes: lignesProduits,
        total_ht: totalHT,
        total_ttc: totalTTC,
        mode_paiement: modePaiement  // Add the payment method to the data
    };

    $.ajax({
        url: "/stage/factures/store",
        method: "POST",
        contentType: "application/json",
        data: JSON.stringify(data),
        dataType: "json",
        success: function(response) {
            if (response.success) {
                alert("Facture enregistrée avec succès !");
                // Redirect to the show page with the new invoice ID
                window.location.href = "/stage/factures/show?id=" + response.facture_id + "&success=created";
            } else {
                alert("Erreur lors de l'enregistrement : " + (response.message || "Erreur inconnue"));
            }
        },
        error: function(xhr) {
            alert("Erreur lors de l'enregistrement : " + xhr.responseText);
        }
    });
  });
</script>
__________________________________________________
<?php
require_once MODEL_PATH . '/FactureModel.php';

class FactureController {
    private $factureModel;
    
    public function __construct($db) {
        $this->factureModel = new FactureModel($db);
    }

    // List all clients
    public function index() {
        $factures = $this->factureModel->getFactures();
        $content_view = 'pages/factures/index';
        include VIEW_PATH . '/layouts/main.php';
    }

    // Show create form
    public function create() {
        $clients = $this->factureModel->getClients();
        $produits = $this->factureModel->getProduits();
        $content_view = 'pages/factures/add';
        include VIEW_PATH . '/layouts/main.php';
    }

    // Store new client (POST)
    public function store() {
        $data = json_decode(file_get_contents('php://input'), true);
    
        $clientId = $data['client_id'];
        $date_emission = $data['date_emission'];
        $lignes = $data['lignes'];
        $total_ht = $data['total_ht'];
        $total_ttc = $data['total_ttc'];
        $mode_paiement = $data['mode_paiement']; // Get the payment method
        
        $result = $this->factureModel->addFacture($clientId, $date_emission, $lignes, $total_ht, $total_ttc, $mode_paiement);
        
        if ($result !== false) {
            // Return the new invoice ID for redirection
            echo json_encode(['success' => true, 'facture_id' => $result]);
        } else {
            echo json_encode(['success' => false, 'message' => 'Failed to create invoice']);
        }
    }

    // Other methods remain unchanged
    
    public function edit() {
        $facture = $this->factureModel->getFactureById($_GET['id']);
        $content_view = 'pages/factures/edit';
        include VIEW_PATH . '/layouts/main.php';
    }

    public function update() {
        $success = $this->factureModel->updateFacture(
            
        );
        if ($success) {
            header('Location: /stage/factures?success=updated');
        } else {
            header('Location: /stage/clients/factures?id='.$_POST['id'].'&error=update_failed');
        }
    }

    public function delete() {
        $success = $this->factureModel->deleteFacture($_POST['id']);
        if ($success) {
            header('Location: /stage/factures?success=deleted');
        } else {
            header('Location: /stage/factures?error=delete_failed');
        }
    }

    public function show() {
        $facture = $this->factureModel->getFactureById($_GET['id']);
        $content_view = 'pages/factures/show';
        include VIEW_PATH . '/layouts/main.php';
    }

    public function saveLine() {
        $produit = $this->factureModel->getProduitById($_POST['produit_id']);
        $qte = intval($_POST['quantite']);
        $remise = intval($_POST['remise']);

        $pu_remise = $produit['prix_u'] * (1 - $remise / 100);
        $ht = $pu_remise * $qte;
        $tva_val = $ht * ($produit['ttva'] / 100);
        $ttc = $ht + $tva_val;

        echo json_encode([
            'produit_id' => $_POST['produit_id'],
            'libelle' => $produit['libelle'],
            'qte' => $qte,
            'prix_u' => $produit['prix_u'],
            'ttva' => $produit['ttva'],
            'ht' => round($ht, 2),
            'remise' => $remise,
            'ttc' => round($ttc, 2)
        ]);
    }
}
__________________________________________________________
<?php
class FactureModel {
    public $db;

    public function __construct($dbConnection) {
        $this->db = $dbConnection;
    }

    public function getFactures() {
        try {
            $query = "SELECT f.id, f.num_facture, f.date_emission, f.total_ht, f.total_ttc, f.mode_paiement, c.nom_ste FROM factures f INNER JOIN clients c ON f.client_id = c.id ORDER BY f.created_at DESC";
            $stmt = $this->db->prepare($query);
            $stmt->execute();
            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            error_log("Database error: " . $e->getMessage());
            return [];
        }
    }

    public function getFactureById($id) {
        try {
            $query = "SELECT * FROM factures WHERE id = :id";
            $stmt = $this->db->prepare($query);
            $stmt->execute(['id' => $id]);
            return $stmt->fetch(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            error_log("Database error: " . $e->getMessage());
            return false;
        }
    }

    public function addFacture($clientId, $date_emission, $lignes, $total_ht, $total_ttc, $mode_paiement) {
        try {
            $this->db->beginTransaction();

            // Updated SQL to include mode_paiement
            $query = "INSERT INTO factures (client_id, date_emission, total_ht, total_ttc, mode_paiement)
                      VALUES (:client_id, :date_emission, :total_ht, :total_ttc, :mode_paiement)";
            $stmt = $this->db->prepare($query);
            $stmt->execute([
               'client_id' => $clientId,
               'date_emission' => $date_emission,
               'total_ht' => $total_ht,
               'total_ttc' => $total_ttc,
               'mode_paiement' => $mode_paiement
            ]);
            $facture_id = $this->db->lastInsertId();

            // Generate formatted numero_facture (e.g., FAC-2025-00012)
            $year = date('Y', strtotime($date_emission));
            $num_facture = "FAC-$year-" . str_pad($facture_id, 5, '0', STR_PAD_LEFT);

            // Update the record with the numero_facture
            $updateQuery = "UPDATE factures SET num_facture = :num WHERE id = :id";
            $updateStmt = $this->db->prepare($updateQuery);
            $updateStmt->execute([
                'num' => $num_facture,
                'id' => $facture_id
            ]);

             // Insert each line into lignes_facture
            $query2 = "INSERT INTO lignes_facture (facture_id, produit_id, qte, remise, prix_u, ttva, ht, ttc)
                      VALUES (:facture_id, :produit_id, :qte, :remise, :prix_u, :ttva, :ht, :ttc)";
                    
            $stmtLines = $this->db->prepare($query2);
            foreach ($lignes as $ligne) {
                $stmtLines->execute([
                    'facture_id' => $facture_id,
                    'produit_id' => $ligne['produit_id'],
                    'qte' => $ligne['qte'],
                    'remise' => $ligne['remise'],
                    'prix_u' => $ligne['prix_u'],
                    'ttva' => $ligne['ttva'],
                    'ht' => $ligne['ht'],
                    'ttc' => $ligne['ttc']
                ]);
            }
            $this->db->commit();

            // Return the facture_id
            return $facture_id;
        } catch (PDOException $e) {
            $this->db->rollback();
            error_log("Database error: " . $e->getMessage());
            return false;
        }
    }

    // The rest of the methods remain unchanged

    public function deleteFacture($id) {
        try {
            $query = "DELETE FROM factures WHERE id = :id";
            $stmt = $this->db->prepare($query);
            $stmt->execute(['id' => $id]);
            return true;
        } catch (PDOException $e) {
            error_log("Database error: " . $e->getMessage());
            return false;
        }
    }

    public function getClients() {
        try {
            $query = "SELECT * FROM clients";
            $stmt = $this->db->prepare($query);
            $stmt->execute();
            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            error_log("Database error: " . $e->getMessage());
            return [];
        }
    }

    public function getClientById($id) {
        try {
            $query = "SELECT * FROM clients WHERE id = :id";
            $stmt = $this->db->prepare($query);
            $stmt->execute(['id' => $id]);
            return $stmt->fetch(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            error_log("Database error: " . $e->getMessage());
            return false;
        }
    }

    public function getProduits() {
        try {
            $query = "SELECT id, libelle FROM produits";
            $stmt = $this->db->prepare($query);
            $stmt->execute();
            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            error_log("Database error: " . $e->getMessage());
            return [];
        }
    }

    public function getProduitById($id) {
        try {
            $query = "SELECT * FROM produits WHERE id = :id";
            $stmt = $this->db->prepare($query);
            $stmt->execute(['id' => $id]);
            return $stmt->fetch(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            error_log("Database error: " . $e->getMessage());
            return false;
        }
    }
}
________________________________________________________________
-- Add mode_paiement column to the factures table if it doesn't exist
ALTER TABLE factures ADD COLUMN IF NOT EXISTS mode_paiement VARCHAR(50) DEFAULT NULL;

-- If you're using MySQL 5.7 or older (without IF NOT EXISTS support):
-- First check if the column exists
-- SHOW COLUMNS FROM factures LIKE 'mode_paiement';

-- If the column doesn't exist, add it
-- ALTER TABLE factures ADD COLUMN mode_paiement VARCHAR(50) DEFAULT NULL;